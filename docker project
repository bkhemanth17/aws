#configuring docker -> Setting up docker in the environment
#docker.sh

yum install docker -y
systemctl start docker.service
systemctl status docker.service
docker pull ubuntu
docker images
docker run -it --name container1 ubuntu

#after creating docker container to make containerization more efficient we need to capture iso image of container
#ctrl pq to exit cont1 & docker ps -a to list all containters where as docker ps to list all runing container
#docker stop cont1 -> to stop the running container
#docker start cont1 -> to start the container from stopped state
#docker attach cont1 -> to enter into cont1
#docker inspect cont1 -> to see the configuration details of container
#docker1.sh ---->>  Manually way of taking backup copy of container

docker ps
docker ps -a
docker commit container1 image:v1
docker images
docker run -it --name cont2 image:v1
docker stop container1
docker start container1
docker inspect container1
docker attach cont2

#run it on the docker container
#containersetup.sh

apt update -y
apt install git maven apache2 -y
touch file{1..101}
apt install vim -y
git --version
ls

#Contarizing application using docker
#create a docker file -> automation way
#contdock.sh

#FROM		: to get the os for conatiner.
#RUN		: to execute linux commands(image creation)
#CMD		: to execute linux commands(container creation)
#ENTRYPOINT	: high priority than CMD
#COPY		: it will copy local files to conatiner.
#ADD		: it will copy internet files to conatiner.
#WORKDIR		: to go specific foilder inside container
#LABEL		: used to attach labels for image
#ENV		: to pass env variables inside the container
#ARGS		: to pass env variables outside the container
#EXPOSE		: used to allocate port number

Vim Dockerfile
#File-1:
FROM ubuntu
RUN apt update -y
RUN apt install git maven apache2 -y
RUN touch file1

#File-2:
FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
RUN touch file1
RUN apt install default-jre -y
CMD ["java", "-version"]

#File-3: 
FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.87/bin/apache-tomcat-9.0.87.tar.gz /tmp

#File-4:
FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.87/bin/apache-tomcat-9.0.87.tar.gz /tmp
WORKDIR /tmp
LABEL author hemanth

#File-5:
FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.87/bin/apache-tomcat-9.0.87.tar.gz /tmp
WORKDIR /tmp
LABEL author hemanth
ENV client Microsoft
ENV Server testing

#File-6:
FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.87/bin/apache-tomcat-9.0.87.tar.gz /tmp
WORKDIR /tmp
LABEL author hemanth

#File-7:
FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.87/bin/apache-tomcat-9.0.87.tar.gz /tmp
WORKDIR /tmp
LABEL author hemanth
EXPOSE 8080

#create image from the Docker file
docker build -t img:v2 .
#create the container from the image(img:v2).
docker run -it --name cont3 img:v2

#PROJECT -1:
#Basic Deployment.
FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

# -D -> tells about detached state whereas -it -> for attached state.
# FOREGROUND -> tells that we can access the content when the container is stop state.
# -itd -> helps us to access the container whenit's on stopped state.
# -p -> stands for port number
docker build -t img:v10 .
docker run -itd --name cont10 -p 81:80 img:v10

DOCKER VOLUMES 
#it's a shared folder from vm directory used for container
#Same as EBS volumes 
#We can attach same multiple containers.

#Creating a Docker volume

#from Dockerfile ->create a docker volume in the dockerfile which will automatically gets a volume in the image creation level.

Vim Dockerfile

FROM ubuntu
VOLUME ["/volume1"]

docker build -t img:v1 .
docker run -it --name cont1 img:v1

#we can attach a docker volume from one container to another container
docker run -it --name cont2 --volumes-from cont1 --privileged=true amazonlinux

#Create a volume
docker volume create volume1
docker volume ls
docker volume inspect volume1
# cd /var/lib/docker/volumes/volume2/_data -> it's a mount point path where all the files and data is stored in this location.

#attaching volume to container
docker run -it --name cont3 --mount source=volume2,destination=/volume2 ubuntu

#attaching volume to container
docker run -it --name cont3 --mount source=volume2,destination=/volume2 ubuntu

#creating the volume manually
docker run -it --name cont5 -v /volume4 ubuntu

#by using cp command we can transfer files from one volume to another volume.
cp * /var/lib/docker/volumes/317e01462ce50347d3e80f5ddc5f57c6c6448c1c4884d3c7be6740c2bb6959d2/_data


#commands container level
docker ps 						                            #list of all running container
docker ps -a 					                            #list all the contents in the container
docker ps -a -q					                          #list the container id of all containers
docker kill $(docker ps -a -q)		                #it will take all containers to exited state(stopped state).
docker rm $(docker ps -a -q)			                #delete after container goes to stopped state.

#commands image level
docker images 					                          #list all the images
docker images -q					                        #list all images id
docker rmi -f $(docker images -q)                 #delete all the images in the registry



#deploying services of an application into individual containers -> microservices architecture.

#using vim Dockerfile -> deploying a different services from an application into individual containers.

#PROJECT-1 : AMAZON.COM -> clone

#method-1:
#we have home(timeline), MY account page, AmazonPay...
vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

#add the code, build an image and create the container 
#container one is for authentication
docker build -t login:img .
docker run -itd --name login -p 81:80 login:img

#For Home service
docker build -t home:img .
docker run -itd --name home -p 82:80 home:img

#for MyAccount
docker build -t myacc:img .
docker run -itd --name myacc -p 83:80 macc:img

#for amazonPay
docker build -t apay:img .
docker run -itd --name apay -p 84:80 apay:img

#Method-2 : Using Docker composer
#using docker compose we can create multiple containers and manage them (which will work on single host).
#we can write a file called docker-compose which will be on yaml format. 
#in that file we can write services info (images, port, volume, replicas)
#it is not inbuilt we need to install manually.

#setup:
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
ls /usr/local/bin/
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose version

#vim docker-compose.yml

version: '3.8'
services:
  login:
    image: login:img
    ports:
      - "81:80"
  home:
    image: home:img
    ports:
      - "82:80"
  myacc:
    image: myacc:img
    ports:
      - "83:80"
  appay:
    image: appay:img
    ports:
      - "84:80"


#docker-compose up -d 				: to create and start the container
#docker-compose stop				: to stop containers
#docker-compose start				: to start containers
#docker-compose kill				: to kill containers
#docker-compose rm				: to delete containers
#docker-compose down				: to stop and delete containers
#docker-compose pause				: to pause containers
#docker-compose unpause				: to unpause containers
#docker-compose ps				: to show containers of compose file
#docker-compose top				: to show process runnning inside the containers 
#docker-compose logs				: to show logs of containers 
#docker-compose scale home=10			: to scale train containers

docker-compose.yml -> it's a default file 
# Supported filenames: docker-compose.yml, docker-compose.yaml, compose.yml, compose.yaml
#docker-compose won't work if we change the default name

#after changing the compose file
mv docker-compose.yml test.yml

#to use docker-compose command 
docker-compose -f test.yml down
docker-compose -f test.yml up -d
docker-compose -f test.yml ps
docker-compose -f test.yml start
docker-compose -f test.yml stop
docker-compose -f test.yml kill
docker-compose -f test.yml rm
docker-compose -f test.yml pause
docker-compose -f test.yml unpause
docker-compose -f test.yml top
docker-compose -f test.yml logs
docker-compose -f test.yml scale home=10

#to go inside the container
docker attach root_appay_1
docker attach root_home_1
docker attach root_login_1
docker attach root_myacc_1


      #Docker Hub
#Go to dockerhub -> create repositry 
#-> set a reponame -> repo= public
#to store images in docker hub -> tag images to docker hub account

#login with docker useraccount credentials
docker login  #(username & password)

#tags the images to docker hub
docker tag home:img bkhemanth17/temp1
docker images

#push to docker hub
docker push bkhemanth17/temp1

#{push the image}
#{docker push dockeruser/reponame   #it need user credentials without loging imaging tagging wont work.}

#we can now easily extract images from docker hub without creating them.
docker run -itd --name cont1 -p 81:80 bkhemanth17/temp1

