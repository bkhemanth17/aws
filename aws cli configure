#PART-1: CONFIGURING IAM USERS IN aws cli

#STEP1: Configuring IAM user with multiple user accounts.
1. create iam user with console access & CLI access.
2. Get access key and secret keys for the user (assign only ec2 admin permissions).
3. Create another user with same console and cli access (assign only s3 permissions).
3. create an ec2 instance (linux machine)

aws configure : add aws access key, secret key, location, json

#to change or to add multiple iam accounts
#aws cli -> using access id and secret key
ls .aws/
ls .aws/credentials
nano .aws/credentials : in the nano file we can add multiple profiles 
aws s3 ls --profile s3 : to switch as another profile user and access s3 buckets.


#STEP2: Write policy 
1.create iam user with console access & CLI access.
2. Get access key and secret keys for the user and create policy manually

#ec2 access to user just to start stop reebot instances based on key tag


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "ec2:Describe*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:RebootInstances"
            ],
            "Resource": [
                "arn:aws:ec2:us-east-1:111122223333:instance/*"
            ],
            "Condition": {
                "StringEquals": {
                    "ec2:ResourceTag/Owner": "Bob"
                }
            }
        }
    ]
}


history:
aws configure
aws ec2 describe-vpcs
aws ec2 describe-vpcs | grep-i VpcID
ls .aws/
ls .aws/credentials
cat .aws/credentials
nano .aws/credentials
aws s3 ls
aws s3 ls --profile s3
nano .aws/config



PART-2: Granting Users and restricting access.

#create a user in managed account
#create a role in organization account and allow admin access copy the arn id.
#in the managed account under user policy write an sts:Assume Role policy and provide the arn id under resource section
#the user can able to access the organizational accounts by just switching his roles.


{
  "Version": "2012-10-17",
  "Statement": {
    "Effect": "Allow",
    "Action": "sts:AssumeRole",
    "Resource": "arn:aws:iam::975050222053:role/awsgrantinguserpermission"
  }
}


#restricting certain services to the user 
#create the policy restrict the services which we need to and attach this customer managed policy under permission boundary set of this role.

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "Statement1",
			"Effect": "Allow",
			"Action": [
				"*"
			],
			"Resource": [
				"*"
			]
		},
		{
			"Sid": "Statement2",
			"Effect": "Deny",
			"Action": [
			    "iam:*"
			    ],
			"Resource": [
			    "*"
			    ]
		}
	]
}



#PART-3: Configuring S3 bucket policy to iam users


#STEP-1: Public read access to all s3 bucket.


{
    "Version": "2012-10-17",
    "Statement":[
    {
     "Sid": "PublicRead",
     "Effect": "Allow",
     "Principal": "*",
     "Action": ["s3:GetObject", "s3:GetObjectversion"],
     "Resource": ["arn:aws:s3:::annnnnnottttthhhherrrrbbbbuckkkeettt/*"]
    }
    ]
}

#STEP -2: Public access to all s3 buckets, and Full access to make any changes on a single bucket.
#s3 bucket public access to iam user to internally. Single Bucket.

{
    "Version":"2012-10-17",
    "Statement":[
       {
        "Effect": "Allow",
        "Action": [
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
        ],
        "Resource": "*"
       },
       {
        "Effect":"Allow",
        "Action":["s3:ListBucket"],
        "Resource":["arn:aws:s3:::annnnnnottttthhhherrrrbbbbuckkkeettt"]
     },
     {
        "Sid": "Stmt1708672326793",
        "Action": "s3:*",
        "Effect": "Allow",
        "Resource": "arn:aws:s3:::annnnnnottttthhhherrrrbbbbuckkkeettt/*"
      }
    ]
}
